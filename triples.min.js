"use strict";function Triples(database){return{put:async function(subject,predicate,object){if(!subject||!predicate||!object)throw"The subject, predicate, and object parameters are required.";let data={subject:isNaN(subject)?subject.toString():parseFloat(subject),predicate:isNaN(predicate)?predicate.toString():parseFloat(predicate),object:isNaN(object)?object.toString():parseFloat(object)},spo={key:"spo::"+subject+"::"+predicate+"::"+object,value:data},sop={key:"sop::"+subject+"::"+object+"::"+predicate,value:data},ops={key:"ops::"+object+"::"+predicate+"::"+subject,value:data},osp={key:"osp::"+object+"::"+subject+"::"+predicate,value:data},pso={key:"pso::"+predicate+"::"+subject+"::"+object,value:data},pos={key:"pos::"+predicate+"::"+object+"::"+subject,value:data};return await database.importDB([spo,sop,ops,osp,pso,pos]),!0},get:async function(subject,predicate,object){let key="spo::"+subject+"::"+predicate+"::"+object,exists=await database.get(key);if(exists.value){let result=exists.value;return{key:exists.key,mode:"spo",subject:result.subject,predicate:result.predicate,object:result.object}}return null},del:async function(subject,predicate,object){if(!subject||!predicate||!object)throw"The subject, predicate, and object parameters are required.";let spo="spo::"+subject+"::"+predicate+"::"+object,sop="sop::"+subject+"::"+object+"::"+predicate,ops="ops::"+object+"::"+predicate+"::"+subject,osp="osp::"+object+"::"+subject+"::"+predicate,pso="pso::"+predicate+"::"+subject+"::"+object,pos="pos::"+predicate+"::"+object+"::"+subject;return await database.del([spo,sop,ops,osp,pso,pos]),!0},list:async function(subject,predicate,object){let search=[],prefix=[],query={subject:subject,predicate:predicate,object:object};for(let i in query)query[i]&&(prefix.push(i[0]),search.push(query[i]));query.subject||prefix.push("s"),query.predicate||prefix.push("p"),query.object||prefix.push("o");let gt="\0",lt="ÿ",q=prefix.join("")+"::"+search.join("::")+"::";if(search&&search.length>0&&(gt=q,lt=q+"ÿ"),3===search.length){let result=await database.get(q.slice(0,-2)),key=result.key.split("::");return result&&result.value?[{key:result.key,mode:key[0],subject:result.value.subject,predicate:result.value.predicate,object:result.value.object}]:[]}return await database.list({gt:gt,lt:lt,values:!0}).then(results=>results.map(result=>{let key=result.key.split("::");return{key:result.key,mode:key[0],subject:result.value.subject,predicate:result.value.predicate,object:result.value.object}}))}}}"undefined"!=typeof module&&module&&module.exports&&(module.exports=Triples);